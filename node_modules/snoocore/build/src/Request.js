'use strict';

var _interopRequireWildcard = function (obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (typeof obj === 'object' && obj !== null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } };

var _interopRequireDefault = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _when = require('when');

var _when2 = _interopRequireDefault(_when);

var _delay = require('when/delay');

var _delay2 = _interopRequireDefault(_delay);

var _import = require('./utils');

var u = _interopRequireWildcard(_import);

var _ResponseError = require('./ResponseError');

var _ResponseError2 = _interopRequireDefault(_ResponseError);

var _httpsNode = require('./https/httpsNode');

var _httpsNode2 = _interopRequireDefault(_httpsNode);

var _httpsBrowser = require('./https/httpsBrowser');

var _httpsBrowser2 = _interopRequireDefault(_httpsBrowser);

var rawHttps = u.isNode() ? _httpsNode2['default'] : _httpsBrowser2['default'];

var Request = (function (_events$EventEmitter) {
  function Request(throttle) {
    _classCallCheck(this, Request);

    _get(Object.getPrototypeOf(Request.prototype), 'constructor', this).call(this);
    this._throttle = throttle;
  }

  _inherits(Request, _events$EventEmitter);

  _createClass(Request, [{
    key: 'https',

    /*
       Makes an https call with a given endpoint.
        If an error handler is provided, it will call it in
       the case of a returned status that is not 2xx / success.
        If the errorHandler results in a rejected promise, then we will NOT
       retry the endpoint and reject with the given error.
     */
    value: function https(endpoint, responseErrorHandler) {
      var _this = this;

      return this._throttle.wait().then(function () {

        var reqOptions = {
          method: endpoint.method.toUpperCase(),
          hostname: endpoint.hostname,
          path: endpoint.computedPath,
          headers: endpoint.headers,
          useBrowserCookies: endpoint._userConfig.useBrowserCookies
        };

        // @TODO Node.js has issues if you set it to 80?
        if (endpoint.port !== 80) {
          reqOptions.port = endpoint.port;
        }

        var formData = endpoint.args;

        return rawHttps(reqOptions, formData).timeout(endpoint.contextOptions.requestTimeout, new _ResponseError2['default']('The request has timed out', {}, endpoint)).then(function (response) {

          var statusChar = String(response._status).substring(0, 1);
          var success = statusChar === '2';

          // If success we're done!
          if (success) {
            return response;
          }

          // Else, retry the endpoint if we can.
          endpoint.contextOptions.retryAttemptsLeft--;

          var responseError = undefined;
          responseError = new _ResponseError2['default']('Response Error', response, endpoint);

          _this.emit('response_error', responseError);

          if (endpoint.contextOptions.retryAttemptsLeft <= 0) {
            responseError.message = 'All retry attempts exhausted.\n\n' + responseError.message;
            return _when2['default'].reject(responseError);
          }

          // Use the given response error handler, or use a thin wrapper that
          // will return the endpoint without any modifications
          responseErrorHandler = responseErrorHandler || function (response, endpoint) {
            return _when2['default'].resolve(endpoint);
          };

          // Call the error handler. If not rejected, retry the endpoint
          // with any modifications made by the responseErrorHandler
          return responseErrorHandler(response, endpoint).then(function (modifiedEndpoint) {

            // Only have a retry delay if the endpoint had an HTTP 5xx status
            var retryDelay = statusChar === '5' ? modifiedEndpoint.contextOptions.retryDelay : 0;

            return _delay2['default'](retryDelay).then(function () {
              return _this.https(modifiedEndpoint, responseErrorHandler);
            });
          });
        });
      });
    }
  }]);

  return Request;
})(_events2['default'].EventEmitter);

exports['default'] = Request;
module.exports = exports['default'];
//# sourceMappingURL=Request.js.map