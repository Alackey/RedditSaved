'use strict';

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});
/*
   A uniform way to report response errors.
*/

var ResponseError = (function (_Error) {
  function ResponseError(message, response, endpoint) {
    _classCallCheck(this, ResponseError);

    var _this = new _Error();

    _this.__proto__ = ResponseError.prototype;

    _this.message = [message, '>>> Response Status: ' + response._status, '>>> Endpoint URL: ' + endpoint.url, '>>> Arguments: ' + JSON.stringify(endpoint.args, null, 2), '>>> Response Body:', response._body].join('\n\n');

    _this.url = endpoint.url;
    _this.args = endpoint.args;
    _this.status = response._status;
    _this.body = response._body;
    _this.retryAttemptsLeft = endpoint.contextOptions.retryAttemptsLeft;
    _this.endpoint = endpoint;
    return _this;
  }

  _inherits(ResponseError, _Error);

  return ResponseError;
})(Error);

exports['default'] = ResponseError;
module.exports = exports['default'];
//# sourceMappingURL=ResponseError.js.map